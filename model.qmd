---
title: "Model"
format:
  html:
    code-fold: true
---


```{python import-libs }
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
```

## Get Data
Here, we connect to a DuckDB database to load our data, fetch the penguins table, and drop any rows with missing values. Finally, we display the first three rows of the dataframe.

```{python load-df-from-db}
import duckdb
con = duckdb.connect('my-db.duckdb')
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
con.close()

df.head(3)
```

## Define Model and Fit
In this section, we prepare our features (X) and target variable (y). Categorical variables are one-hot encoded. The linear regression model is then fitted with this data.

```{python model-def}
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']

model = LinearRegression().fit(X, y)
```

## Get some information
After fitting the model, we print out the model's R-squared value, the intercept, the names of the columns used, and the model's coefficients to understand its performance and the influence of each feature.

```{python model-info}
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
```


## Store Model
This section deals with storing the model. We use vetiver and pins for model management and versioning. The model is stored in a designated folder, ensuring it can be easily accessed and used later.
```{python store-model}
from vetiver import *
import pins
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
b = pins.board_folder('data/model', allow_pickle_read=True)
vetiver_pin_write(b, v)
```





---

## Next Steps

Now that our model is ready and stored, the next phase is **Setting Up the API**. We'll see how to prepare our API for interacting with the model.

[Proceed to Setup API](setup-api.html)

